/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsAndConditionsRouteImport } from './routes/terms-and-conditions.route'
import { Route as ServicesRouteImport } from './routes/services.route'
import { Route as ProjectsRouteImport } from './routes/projects.route'
import { Route as ProductsRouteImport } from './routes/products.route'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy.route'
import { Route as CareersRouteImport } from './routes/careers.route'
import { Route as BlogRouteImport } from './routes/blog.route'
import { Route as AboutRouteImport } from './routes/about.route'
import { Route as IndexRouteImport } from './routes/index.route'

// Create/Update Routes

const TermsAndConditionsRouteRoute = TermsAndConditionsRouteImport.update({
  id: '/terms-and-conditions',
  path: '/terms-and-conditions',
  getParentRoute: () => rootRoute,
} as any)

const ServicesRouteRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRouteRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const ProductsRouteRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRouteRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const CareersRouteRoute = CareersRouteImport.update({
  id: '/careers',
  path: '/careers',
  getParentRoute: () => rootRoute,
} as any)

const BlogRouteRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const AboutRouteRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRoute
    }
    '/careers': {
      id: '/careers'
      path: '/careers'
      fullPath: '/careers'
      preLoaderRoute: typeof CareersRouteImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRoute
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRoute
    }
    '/terms-and-conditions': {
      id: '/terms-and-conditions'
      path: '/terms-and-conditions'
      fullPath: '/terms-and-conditions'
      preLoaderRoute: typeof TermsAndConditionsRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/about': typeof AboutRouteRoute
  '/blog': typeof BlogRouteRoute
  '/careers': typeof CareersRouteRoute
  '/privacy-policy': typeof PrivacyPolicyRouteRoute
  '/products': typeof ProductsRouteRoute
  '/projects': typeof ProjectsRouteRoute
  '/services': typeof ServicesRouteRoute
  '/terms-and-conditions': typeof TermsAndConditionsRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/about': typeof AboutRouteRoute
  '/blog': typeof BlogRouteRoute
  '/careers': typeof CareersRouteRoute
  '/privacy-policy': typeof PrivacyPolicyRouteRoute
  '/products': typeof ProductsRouteRoute
  '/projects': typeof ProjectsRouteRoute
  '/services': typeof ServicesRouteRoute
  '/terms-and-conditions': typeof TermsAndConditionsRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/about': typeof AboutRouteRoute
  '/blog': typeof BlogRouteRoute
  '/careers': typeof CareersRouteRoute
  '/privacy-policy': typeof PrivacyPolicyRouteRoute
  '/products': typeof ProductsRouteRoute
  '/projects': typeof ProjectsRouteRoute
  '/services': typeof ServicesRouteRoute
  '/terms-and-conditions': typeof TermsAndConditionsRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blog'
    | '/careers'
    | '/privacy-policy'
    | '/products'
    | '/projects'
    | '/services'
    | '/terms-and-conditions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blog'
    | '/careers'
    | '/privacy-policy'
    | '/products'
    | '/projects'
    | '/services'
    | '/terms-and-conditions'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blog'
    | '/careers'
    | '/privacy-policy'
    | '/products'
    | '/projects'
    | '/services'
    | '/terms-and-conditions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  AboutRouteRoute: typeof AboutRouteRoute
  BlogRouteRoute: typeof BlogRouteRoute
  CareersRouteRoute: typeof CareersRouteRoute
  PrivacyPolicyRouteRoute: typeof PrivacyPolicyRouteRoute
  ProductsRouteRoute: typeof ProductsRouteRoute
  ProjectsRouteRoute: typeof ProjectsRouteRoute
  ServicesRouteRoute: typeof ServicesRouteRoute
  TermsAndConditionsRouteRoute: typeof TermsAndConditionsRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AboutRouteRoute: AboutRouteRoute,
  BlogRouteRoute: BlogRouteRoute,
  CareersRouteRoute: CareersRouteRoute,
  PrivacyPolicyRouteRoute: PrivacyPolicyRouteRoute,
  ProductsRouteRoute: ProductsRouteRoute,
  ProjectsRouteRoute: ProjectsRouteRoute,
  ServicesRouteRoute: ServicesRouteRoute,
  TermsAndConditionsRouteRoute: TermsAndConditionsRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/blog",
        "/careers",
        "/privacy-policy",
        "/products",
        "/projects",
        "/services",
        "/terms-and-conditions"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/about": {
      "filePath": "about.route.tsx"
    },
    "/blog": {
      "filePath": "blog.route.tsx"
    },
    "/careers": {
      "filePath": "careers.route.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.route.tsx"
    },
    "/products": {
      "filePath": "products.route.tsx"
    },
    "/projects": {
      "filePath": "projects.route.tsx"
    },
    "/services": {
      "filePath": "services.route.tsx"
    },
    "/terms-and-conditions": {
      "filePath": "terms-and-conditions.route.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
